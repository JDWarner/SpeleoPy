import numpy as np


def sealevel_corrector(sealevel_correction, sealevel_age, data, data_age):
    """
    Returns a column of sea-level corrected d18O values.

    Parameters
    ----------
    sealevel_correction : (N) ndarray of floats
        Values to use to correct oxygen isotope data (`data`) for ocean d18O
    sealevel_age : (N) ndarray of floats
        Ages corresponding to `sealevel_correction` values
    data : (M) ndarray of floats
        Oxygen isotope values to be corrected
    data_age : (M) ndarray of floats
        Ages corresponding to `data`

    """
    # Initialize
    data_d18o_corr = []

    # Get the bracketing ages
    lowarg, uparg = sealevelagebracket(sealevel_age, data_age)

    # Interpolate between the sea level correction values of bracketing ages
    # to get correction at the age of the data points, then perform correction
    for low, up, pt, age in zip(lowarg, uparg, data, data_age):
        x0 = sealevel_age[low]
        x1 = sealevel_age[up]

        y0 = sealevel_correction[low]
        y1 = sealevel_correction[low]

        interp_corr = y0 + (y1-y0)* ((age - x0)/(x1-x0))

        corrected_data = pt - interp_corr

        data_d18o_corr.append(corrected_data)

    # Output data as a 1D columnar array (for easy insertion into excel)
    data_d18o_corr = np.asarray(data_d18o_corr).astype(np.float64)

    return data_d18o_corr


def sealevelagebracket(sealevel_age, data_age):
    """
    Returns lists of the arguments of the upper and lower time points
        in the sea level curve that bracket the time points of the data.

    Parameters
    ----------
    sealevel_age : (M) ndarray of floats
        The timesteps of the sea level data
    data_age : (R) ndarray of floats
        The timesteps of the data to be corrected

    Returns
    -------
    lowarg : list of ints
        A list of length R of the indices of the sealevel_age age column
        where the age is just below the age of the data point.
    upparg : list of ints
        A list of length R of the indices of the sealevel_age age column
        where the age is just above the age of the data point.

    """

    # Initialize
    lowarg = []
    upparg = []

    # Find the bracketing ages for each time step in data_age
    for age in data_age:
        for low, up in zip(sealevel_age[:-1], sealevel_age[1:]):
            if low <= age <= up:

                lowarg.append(np.nonzero(sealevel_age == low)[0][0])
                upparg.append(np.nonzero(sealevel_age == up)[0][0])

                break

    return lowarg, upparg


def smooth(frontend, backend, data):
    """
    Simple running average in array.

    Assumes that the smoothing period is less than the size of the array

    Parameters
    ----------
    frontend : int
        Number of values before current position to include in the average
    backend : int
        Number of values after current position to include in the average
    data : 1D Numpy ndarray of floats or ints
        The data to be smoothed

    Returns
    -------
    smoothed_data : 1D Numpy ndarray of floats
        `data` smoothed by a running average

    """

    # Initialize
    i = 0
    smoothed_data = []

    while i < frontend:
        smoothed_data.append(np.mean(data[ : i+backend+1]))
        i += 1

    while i < data.size - backend:
        smoothed_data.append(np.mean(data[i-frontend : i + backend + 1]))
        i += 1

    while i < data.size:
        smoothed_data.append(np.mean(data[i-frontend : ]))
        i += 1

    smoothed_data = np.asarray(smoothed_data, dtype=np.float64)

    return smoothed_data



def get_sealevel_data():
	"""
	Acquire sea levels, ages, and d18O corrections.

	Returns
	-------
	sea_level_age
	sea_level_m
	sea_level_corr

	"""

	sea_level_age = np.array([0, 3023, 5000, 5100, 5200, 5300, 5400, 5500, 5600,
							  5700, 5800, 5900, 6000, 6100, 6200, 6300, 6400,
							  6500, 6600, 6700, 6800, 6900, 7000, 7100, 7200,
							  7300, 7400, 7500, 7600, 7700, 7800, 7900, 8000,
							  8100, 8200, 8300, 8400, 8500, 8600, 8700, 8800,
							  8900, 9000, 9100, 9200,
							  9300, 9400, 9500, 9600, 9700, 9800, 9900, 10000,
							  10100, 10200, 10300, 10400, 10500, 10600, 10700,
							  10800, 10900, 11000, 11100, 11200, 11300, 11400,
							  11500, 11600, 11700, 11800, 11900, 12000, 12100,
							  12200, 12300, 12400, 12500, 12600, 12700, 12800,
							  12900, 13000, 13100, 13200, 13300, 13400, 13500,
							  13600, 13700, 13800, 13900, 14000, 14100, 14200,
							  14300, 14400, 14500, 14600, 14700, 14800, 14900,
							  15000, 15100, 15200, 15300, 15400, 15500, 15600,
							  15700, 15800, 15900, 16000, 16100, 16200, 16300,
							  16400, 16500, 16600, 16700, 16800, 16900, 17000,
							  17100, 17200, 17300, 17400, 17500, 17600, 17700,
							  17800, 17900, 18000, 18100, 18200, 18300, 18400,
							  18500, 18600, 18700, 18800, 18900, 19000, 19100,
							  19200, 19300, 19400, 19500, 19600, 19700, 19800,
							  19900, 20000, 20100, 20200, 20300, 20400, 20500,
							  20600, 20700, 20800, 20900, 21000, 21100, 21200,
							  21300, 21400, 21500, 21600, 21700, 21800, 21900,
							  22000, 22196, 22384, 22572, 22760, 22948, 23136,
							  23324, 23512, 23700, 23897, 24094, 24291, 24488,
							  24684, 24881, 25078, 25275, 25472, 25669, 25866,
							  26063, 26259, 26456, 26653, 26850, 27047, 27244,
							  27441, 27638, 27834, 28031, 28228, 28425, 28622,
							  28819, 29016, 29213, 29409, 29606, 29803, 30000,
							  30283, 30567, 30850, 31133, 31417, 31700, 31983,
							  32267, 32550, 32833, 33117, 33400, 33683, 33967,
							  34250, 34533, 34817, 35100, 35383, 35667, 35950,
							  36233, 36517, 36800, 36919, 37038, 37158, 37277,
							  37396, 37515, 37635, 37754, 37873, 37992, 38112,
							  38231, 38350, 38576, 38801, 39027, 39253, 39479,
							  39704, 39930, 40156, 40381, 40607, 40833, 41058,
							  41284, 41510, 41736, 41961, 42187, 42413, 42638,
							  42864, 43090, 43315, 43541, 43767, 43993, 44218,
							  44444, 44670, 44895, 45121, 45347, 45572, 45798,
							  46024, 46250, 46475, 46701, 46927, 47152, 47378,
							  47659, 47940, 48221, 48502, 48783, 49064, 49345,
							  49626, 49907, 50188, 50469, 50750, 51031, 51311,
							  51592, 51873, 52154, 52435, 52716, 52997, 53278,
							  53559, 53840, 54121, 54402, 54683, 54849, 55014,
							  55180, 55346, 55512, 55677, 55843, 56009, 56175,
							  56340, 56506, 56672, 56838, 57003, 57169, 57335,
							  57500, 57666, 57832, 57998, 58163, 58329, 58495,
							  58661, 58826, 58992, 59158, 59324, 59489, 59655,
							  59893, 60130, 60368, 60605, 60843, 61080, 61318,
							  61555, 61793, 62031, 62268, 62506, 62743, 62981,
							  63218, 63456, 63693, 63931, 64169, 64406, 64644,
							  64881, 65119, 65356, 65594, 65831, 66069, 66306,
							  66544, 66782, 67019, 67257, 67494, 67732, 67969,
							  68207, 68444, 68682, 68920, 69157, 69395, 69632,
							  69870, 70107, 70345, 70582, 70820, 70932, 71044,
							  71156, 71268, 71379, 71491, 71603, 71715, 71827,
							  71939, 72051, 72163, 72274, 72386, 72498, 72610,
							  72722, 72834, 72946, 73058, 73169, 73281, 73393,
							  73505, 73617, 73729, 73841, 73953, 74064, 74176,
							  74288, 74400, 74512, 74624, 74736, 74848, 74959,
							  75071, 75183, 75295, 75407, 75519, 75631, 75743,
							  75854, 75966, 76078, 76190, 76664, 77138, 77612,
							  78086, 78560, 79034, 79508, 79982, 80456, 80930,
							  81404, 81878, 82352, 82826, 83300, 83774, 84248,
							  84722, 85196, 85670, 86144, 86618, 87092, 87566,
							  88040, 88514, 88988, 89462, 89936, 90410, 90884,
							  91358, 91832, 92600, 93361, 94129, 94890, 95907,
							  96668, 97436, 98197, 98964, 99725, 100500, 101770,
							  102694, 103387, 104195, 104888, 105581, 106505,
							  106967, 107198, 107660, 108006, 108699, 109161,
							  109392, 109623, 110085, 110315, 110777, 111239,
							  111470, 112048, 112279, 112740, 113202, 113664,
							  114126, 114357, 114819, 115050, 115627, 116089,
							  116551, 116782, 117244, 117590, 118283, 118861,
							  119554, 119900, 120491, 120787, 121280, 121871,
							  122463, 122758, 123251, 123547, 124138, 124730,
							  125518, 126110, 126405, 127588, 128081, 128377,
							  128869, 129067, 129757, 130249, 130742, 132516,
							  133206, 134981, 135473, 135966, 136656, 137149,
							  137642, 138233, 138627, 138923, 139909, 140303,
							  140796, 141683, 142176, 142570, 142964, 143556,
							  143950, 144246, 144837, 145231, 146118, 147695,
							  148681, 149075, 149470, 149963, 150751, 151737,
							  152624, 153018, 153412, 154004, 154694, 155384,
							  155876, 156369, 156862, 158636, 159326, 159819,
							  160312, 161002, 161593, 162086, 163795, 165634,
							  167409, 168000], dtype=np.float64)

	sea_level_m = np.array([0, 0, 0.00, -0.31, -0.31, -0.35, -0.47, -0.51,
							-0.61, -0.77, -1.10, -1.20, -1.46, -1.89, -2.32,
							-2.68, -3.11, -3.47, -3.94, -4.73, -5.26, -5.85,
							-6.38, -6.86, -7.70, -8.45, -9.40, -10.23, -10.98,
							-12.51, -13.93, -15.15,	-16.26, -16.95, -17.85,
							-18.54, -19.23, -19.59, -20.06,	-20.55, -21.28,
							-22.46, -23.76, -24.51, -25.83, -26.78,	-27.90,
							-29.16, -30.42, -32.55, -33.18, -34.70, -36.02,
							-36.87, -37.93, -39.72, -40.20, -41.42, -43.07,
							-44.49,	-46.01, -47.72, -49.40, -51.50, -53.20,
							-54.00, -54.60,	-54.80, -54.90, -55.10, -55.30,
							-55.50, -55.70, -55.96,	-56.33, -57.06, -57.64,
							-58.40, -59.29, -60.18, -61.14,	-62.09, -62.88,
							-63.88, -65.42, -66.05, -67.05, -67.74,	-68.85,
							-70.38, -71.78, -73.99, -78.31, -82.00, -87.20,
							-88.00, -88.73, -90.74, -92.91, -94.76, -96.30,
							-97.30,	-98.25, -98.68, -98.98, -99.47, -99.90,
							-100.26, -100.69, -101.02, -101.28, -101.81,
							-101.95, -102.21, -102.86, -103.13, -103.39,
							-103.92, -104.12, -104.55, -104.87, -105.18,
							-105.60, -105.93, -106.19, -106.62,	-107.08,
							-107.29, -107.78, -108.14, -108.57, -109.20,
							-109.46, -110.20, -110.48, -110.88, -111.31,
							-111.64, -111.84, -112.26, -113.06, -114.38,
							-115.43, -116.65, -117.54, -118.62, -119.51,
							-120.31, -120.73, -121.14, -121.42, -121.46,
							-121.46, -121.52, -121.53, -121.54,	-121.56,
							-121.56, -121.56, -121.52, -121.56, -121.56,
							-121.62, -121.62, -121.68, -121.68, -121.67,
							-121.69, -121.68, -121.69, -121.67, -121.69,
							-121.69, -122, -121, -120, -122, -120, -114,
							-110, -108, -107, -105,	-107, -109, -112, -109,
							-100, -94, -93, -93, -89, -90, -89, -90, -93, -97,
							-100, -100, -99, -97, -95, -94, -94, -96, -97, -95,
							-92, -92, -93, -94, -91, -86, -86, -83,	-87, -86,
							-86, -86, -86, -84, -82, -83, -84, -79, -80,-85,
							-87, -87, -84, -84, -83, -82, -78, -77, -78, -77,
							-76, -77, -78, -80, -82, -80, -80, -79, -76, -74,
							-71, -64, -64, -64, -67, -71, -74, -72, -75, -80,
							-83, -87, -91, -92, -96, -94, -93, -90, -86, -87,
							-87, -87, -85, -83, -83, -82, -83, -81, -76, -72,
							-64, -66, -68, -73,	-73, -73, -75, -74, -72, -70,
							-68, -65, -58, -57, -63, -66, -66, -67, -74, -73,
							-71, -70, -69, -71, -73, -76, -77, -77, -77, -75,
							-74, -73, -72, -71, -69, -69, -66, -65, -66, -62,
							-65, -68, -71, -76, -78, -79, -82, -83,	-83, -83,
							-81, -79, -79, -77, -76, -75, -75, -74, -73,
							-70, -70, -68, -68, -70, -69, -69, -68, -69, -69,
							-68, -71, -71, -76, -85, -88, -91, -93, -90, -92,
							-97, -100, -99, -97, -90, -84, -84, -85, -88, -92,
							-92, -93, -90, -84, -80, -79, -82, -86, -89, -87,
							-85, -82, -79, -82,	-82, -81, -80, -78, -78, -78,
							-81, -85, -86, -85, -85, -85, -84, -80, -78, -77,
							-76, -75, -73, -71, -68, -67, -68, -66, -65, -63,
							-61, -59, -59, -59, -59, -58, -57, -56, -54, -51,
							-47, -48, -53, -57, -58, -56, -53, -50,	-49, -43,
							-39, -39, -39, -40, -40, -37, -33, -30, -31,
							-33, -35, -31, -28, -26, -24, -24, -24, -25, -26,
							-25, -24, -24, -24, -24, -22, -18, -13, -8, -10,
							-12, -14, -17, -20, -24, -27, -28, -28, -28, -27,
							-26, -26, -28, -31, -34, -37, -38, -40, -42, -44,
							-55, -36, -47, -45,	-26, -23, -21, -33, -27, -18,
							-14, -19, -20, -22, -14, -31, -37, -33, -42, -34,
							-42, -28, -44, -63, -44, -42, -51, -46, -59, -51,
							-29, -49, -27, -14, -20, -14, -14, -14, -8, -7,
							-3, -6, -22, -14, -13, -1, 1, 3, 1, 5, -7, 2, 3,
							3, 10, 6, 9, -2, 5, 3, 5, 3, 2, -2, 0, 0, -14,
							-24, -36, -14, -59, -54, -93, -82, -95, -76,
							-86, -137, -127, -105, -113, -98, -101, -98, -98,
							-108, -111, -96, -99, -103, -94, -90, -98, -94,
							-95, -92, -89, -90, -86, -84, -89, -99, -97, -114,
							-117, -79, -97, -77, -94, -90, -79, -64, -62, -61,
							-97, -93, -78, -65, -76, -71, -55, -49],
							dtype=np.float64)

	sea_level_corr = np.array([0.00,
							   0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
							   0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.02, 0.03,
							   0.03, 0.03, 0.04, 0.04, 0.05, 0.05, 0.06, 0.06,
							   0.07, 0.08, 0.08, 0.09, 0.10, 0.11, 0.12, 0.13,
							   0.14, 0.15, 0.15, 0.16, 0.16, 0.16, 0.17, 0.17,
							   0.18, 0.19, 0.20, 0.21, 0.22, 0.23, 0.24, 0.25,
							   0.27, 0.27, 0.28, 0.30, 0.30, 0.31, 0.33, 0.33,
							   0.34, 0.35, 0.36, 0.38, 0.39, 0.40, 0.42, 0.44,
							   0.44, 0.45, 0.45, 0.45, 0.45, 0.45, 0.45, 0.46,
							   0.46, 0.46, 0.47, 0.47, 0.48, 0.49, 0.49, 0.50,
							   0.51, 0.52, 0.52, 0.54, 0.54, 0.55, 0.56, 0.56,
							   0.58, 0.59, 0.61, 0.64, 0.67, 0.71, 0.72, 0.73,
							   0.74, 0.76, 0.78, 0.79, 0.80, 0.81, 0.81, 0.81,
							   0.82, 0.82, 0.82, 0.83, 0.83, 0.83, 0.83, 0.84,
							   0.84, 0.84, 0.85, 0.85, 0.85, 0.85, 0.86, 0.86,
							   0.86, 0.87, 0.87, 0.87, 0.87, 0.88, 0.88, 0.88,
							   0.89, 0.89, 0.90, 0.90, 0.90, 0.91, 0.91, 0.91,
							   0.92, 0.92, 0.92, 0.93, 0.94, 0.95, 0.96, 0.96,
							   0.97, 0.98, 0.99, 0.99, 0.99, 1.00, 1.00, 1.00,
							   1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00,
							   1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00,
							   1.00, 1.00, 1.00, 1.00, 1.00, 0.99, 0.99, 1.00,
							   0.98, 0.93, 0.90, 0.89, 0.88, 0.86, 0.88, 0.90,
							   0.92, 0.90, 0.82, 0.77, 0.76, 0.76, 0.73, 0.73,
							   0.73, 0.73, 0.76, 0.79, 0.82, 0.82, 0.81, 0.79,
							   0.78, 0.77, 0.77, 0.78, 0.80, 0.78, 0.76, 0.75,
							   0.76, 0.77, 0.74, 0.70, 0.71, 0.68, 0.71, 0.70,
							   0.70, 0.71, 0.70, 0.69, 0.67, 0.68, 0.69, 0.65,
							   0.65, 0.70, 0.71, 0.71, 0.69, 0.69, 0.68, 0.67,
							   0.64, 0.63, 0.64, 0.63, 0.62, 0.63, 0.64, 0.65,
							   0.68, 0.66, 0.66, 0.64, 0.62, 0.61, 0.58, 0.53,
							   0.53, 0.53, 0.55, 0.58, 0.60, 0.59, 0.61, 0.66,
							   0.68, 0.71, 0.74, 0.76, 0.78, 0.77, 0.76, 0.74,
							   0.70, 0.71, 0.71, 0.72, 0.70, 0.68, 0.68, 0.67,
							   0.68, 0.66, 0.62, 0.59, 0.53, 0.54, 0.56, 0.59,
							   0.59, 0.60, 0.61, 0.61, 0.59, 0.57, 0.56, 0.53,
							   0.48, 0.47, 0.52, 0.54, 0.54, 0.55, 0.61, 0.60,
							   0.58, 0.57, 0.57, 0.58, 0.60, 0.62, 0.63, 0.63,
							   0.63, 0.61, 0.60, 0.60, 0.59, 0.58, 0.56, 0.56,
							   0.54, 0.53, 0.54, 0.51, 0.53, 0.56, 0.58, 0.62,
							   0.64, 0.64, 0.67, 0.68, 0.68, 0.68, 0.66, 0.65,
							   0.64, 0.63, 0.62, 0.62, 0.61, 0.61, 0.60, 0.57,
							   0.57, 0.56, 0.56, 0.57, 0.57, 0.57, 0.56, 0.57,
							   0.57, 0.56, 0.59, 0.58, 0.62, 0.70, 0.72, 0.74,
							   0.76, 0.74, 0.75, 0.79, 0.82, 0.81, 0.80, 0.74,
							   0.69, 0.69, 0.70, 0.72, 0.75, 0.75, 0.76, 0.73,
							   0.69, 0.66, 0.65, 0.67, 0.71, 0.73, 0.71, 0.70,
							   0.67, 0.65, 0.67, 0.67, 0.66, 0.65, 0.64, 0.64,
							   0.64, 0.67, 0.70, 0.70, 0.70, 0.70, 0.70, 0.68,
							   0.66, 0.64, 0.63, 0.63, 0.62, 0.60, 0.58, 0.56,
							   0.55, 0.55, 0.54, 0.53, 0.51, 0.50, 0.48, 0.48,
							   0.48, 0.48, 0.48, 0.47, 0.46, 0.44, 0.42, 0.39,
							   0.40, 0.43, 0.47, 0.48, 0.46, 0.44, 0.41, 0.40,
							   0.35, 0.32, 0.32, 0.32, 0.33, 0.32, 0.31, 0.27,
							   0.25, 0.25, 0.27, 0.28, 0.25, 0.23, 0.21, 0.20,
							   0.20, 0.20, 0.20, 0.21, 0.21, 0.20, 0.20, 0.20,
							   0.20, 0.18, 0.15, 0.10, 0.07, 0.08, 0.10, 0.12,
							   0.14, 0.16, 0.20, 0.22, 0.23, 0.23, 0.23, 0.22,
							   0.21, 0.21, 0.23, 0.25, 0.27, 0.30, 0.31, 0.33,
							   0.34, 0.36, 0.45, 0.30, 0.39, 0.37, 0.21, 0.19,
							   0.17, 0.27, 0.22, 0.15, 0.12, 0.15, 0.16, 0.18,
							   0.11, 0.25, 0.30, 0.27, 0.34, 0.28, 0.34, 0.23,
							   0.36, 0.51, 0.36, 0.34, 0.42, 0.38, 0.48, 0.42,
							   0.24, 0.40, 0.22, 0.12, 0.16, 0.12, 0.11, 0.11,
							   0.06, 0.06, 0.02, 0.05, 0.18, 0.12, 0.11, 0.01,
							   -0.01, -0.03, -0.01, -0.04, 0.06, -0.01, -0.02,
							   -0.02, -0.08, -0.05, -0.07, 0.02, -0.04, -0.03,
							   -0.04, -0.02, -0.02, 0.01, 0.00, 0.00, 0.11,
							   0.20, 0.30, 0.12, 0.48, 0.44, 0.76, 0.67, 0.78,
							   0.62, 0.70, 1.12, 1.04, 0.86, 0.93, 0.80, 0.83,
							   0.81, 0.81, 0.88, 0.91, 0.78, 0.81, 0.84, 0.77,
							   0.74, 0.81, 0.77, 0.78, 0.75, 0.73, 0.74, 0.70,
							   0.69, 0.73, 0.81, 0.79, 0.93, 0.96, 0.65, 0.79,
							   0.63, 0.77, 0.74, 0.65, 0.52, 0.51, 0.50, 0.79,
							   0.76, 0.64, 0.53, 0.62, 0.58, 0.45, 0.40],
							   dtype=np.float64)

	return sea_level_age, sea_level_m, sea_level_corr